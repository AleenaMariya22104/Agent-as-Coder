
# -*- coding: utf-8 -*-
"""
This script was auto-generated by an AI agent.
It parses ICICI bank statement PDFs into a pandas DataFrame.
"""
import pandas as pd
import pdfplumber
import re
import numpy as np

def parse(pdf_path: str) -> pd.DataFrame:
    """
    Parses the transaction data from an ICICI bank statement PDF.

    Args:
        pdf_path: The file path to the PDF bank statement.

    Returns:
        A pandas DataFrame with the transaction data, matching the
        required schema: ['Date', 'Description', 'Debit Amt', 'Credit Amt', 'Balance'].
    """
    # Regex to capture a transaction line. It looks for:
    # - A date (dd-mm-yyyy) at the start of the line.
    # - A non-greedy description capture.
    # - Three optional, right-aligned numerical values (debit, credit, balance).
    # This handles lines where debit or credit might be empty.
    transaction_regex = re.compile(
    r"^(\d{2}-\d{2}-\d{4})\s+(.*?)\s+([\d,.]*)\s+([\d,.]*)\s+([-\d,.]+)$"
    )

    all_transactions = []
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    lines = text.split('\n')
                    for line in lines:
                        match = transaction_regex.match(line)
                        if match:
                            date, desc, debit, credit, balance = match.groups()

                            # Clean up description
                            desc = desc.strip()
                            
                            all_transactions.append([
                                date,
                                desc,
                                debit if debit.strip() else np.nan,
                                credit if credit.strip() else np.nan,
                                balance
                            ])

    except Exception as e:
        print(f"Error processing PDF: {e}")
        return pd.DataFrame()

    if not all_transactions:
        print("Warning: No transactions were extracted.")
        return pd.DataFrame()
        
    # Create DataFrame with the correct schema
    df = pd.DataFrame(all_transactions, columns=[
        'Date', 'Description', 'Debit Amt', 'Credit Amt', 'Balance'
    ])

    # --- Data Cleaning and Type Conversion ---
    # Convert amount columns to numeric, coercing errors to NaN
    for col in ['Debit Amt', 'Credit Amt', 'Balance']:
        # Remove commas before converting to numeric
        df[col] = df[col].astype(str).str.replace(',', '', regex=False)
        df[col] = pd.to_numeric(df[col], errors='coerce')
        
    return df

